#!/bin/bash


validateIPVFOUR(){
	if [ "${#1}" -gt "15" ]; then
		return 1;
	fi
	char="";
	array=();
	counter=0;
	lastnum=0;
	for (( i=0; i<${#1}; i++ )); do
		char="${1:$i:1}";
		if [ "$char" == "." ]; then
			diff=$((i-lastnum));
			array[counter]="${1:$lastnum:$diff}";
			#printf "$counter : ${array[$counter]}\n";
			counter=$((counter+1));
			lastnum=$((i+1));
		fi
	done
	len=${#1};
	diff=$((len-lastnum));
	array[counter]="${1:$lastnum:$diff}";
	#printf "$counter : ${array[$counter]}\n";
	counter=$((counter+1));	
	re='^[0-9]+$';
	for (( i=0; i<$counter; i++ )); do
		if [ "${#array[$i]}" -le "0" ] || [ ${#array[$i]} -gt "3" ]; then
			return 1;
		fi
		for (( j=0; j<${#array[$i]}; j++ )); do
			char="${array[$i]:$j:1}";
			if ! [[ $char =~ $re ]] ; then
				return 1; 
			fi	
		done
	done
	for (( i=0; i<$counter; i++ )); do
		if [ "${array[$i]}" -gt "255" ]; then
			return 1;
		fi
	done
	return 0;
}

#Initial

if [ "$EUID" -ne 0 ]; then
	printf "Please run script as root\n"
	exit;
fi

filename="hostips";
data="";

clear

if [ -f $PWD/$filename  ]; then
	printf "File exists\nImporting data from file...\n";
	data=$(cat $PWD/$filename);
	printf "Done\n";	
else
	printf "File does not exist\nCreating file...\n";
	touch $PWD/$filename
	printf "Done\nPlease input ip addresses individually, press e then enter to exit\n";
	while true; do
		read input;
		if [ "$input" == "e" ]; then
			break;
		fi
		if validateIPVFOUR $input ; then
			printf "Valid IP $input\n";
			sh -c "echo '$input ' >> '$PWD/$filename'"; 
		else
			printf "Invalid IP $input, please try again\n";
		fi
	done
	data=$(cat $PWD/$filename);
fi

clear

printf "Validating all ips in file...\n\n";
for ip in $data; do
	if ! validateIPVFOUR $ip ; then
		printf "INVALID IP!!! = $ip\n\nExiting!\n";
		exit;
	fi
	printf "$ip\n";
done
printf "\nValid ;)\n\nGathering initial data...";

sendLogs="0";

while true; do
	statusarray=();
	statuscounter=0;
	for ip in $data; do
		result="$(ping -q -n -s 2 -W 2 -c 4 $ip)";
		result="${result##*-}";
		for part in $result; do
			if [[ "$part" == *"%"* ]]; then
				result=${part:0:(${#part}-1)};
				#echo "$result";
				if [ "$result" -gt 25 ] && [ "$result" -lt 100 ]; then
					result="??";
				elif [ "$result" -eq 100 ]; then
					result="DOWN";
				else
					result="UP";	
				fi
				break;
			fi
		done
		statusarray[statuscounter]="$result";
		statuscounter=$((statuscounter+1));
	done
	
	clear;

	printf "   __ __         __    ______       __         \n";
	printf "  / // /__  ___ / /_  / __/ /____ _/ /___ _____\n";
	printf " / _  / _ \\(_-</ __/ _\\ \\/ __/ _ \`/ __/ // (_-<\n";
	printf "/_//_/\\___/___/\\__/ /___/\\__/\\_,_/\\__/\\_,_/___/\n";
	printf "\n By Alex C.\n\n";

	printf " HOST                STATUS\n\n";
	statuscounter=0;
	for ip in $data; do
		printf " ";
		printf "%-15s" "$ip";
		printf "     "
		if [ "$sendLogs" == "1" ]; then
			logger [HOSTSTATUS]: $ip is ${statusarray[$statuscounter]}				
		fi
		case ${statusarray[$statuscounter]} in
			UP)
				printf "\e[32;1mUP\e[0m\n";
				;;
			DOWN)
				printf "\e[31;1mDOWN\e[0m\n";
				;;
			??)
				printf "\e[33;1m??\e[0m\n";
				;;
		esac
		statuscounter=$((statuscounter+1));
	done
	
	date="$(date +'%H:%M:%S %D')";	
	printf "\n Last Updated: $date\n\n"
	printf "\n [To exit: Press e then enter] ";

	read -t 2 input;
	if [ "$input" == "e" ]; then
		break;
	fi	
	
	sleep 1;
done

printf "\n Done!\n\n "
